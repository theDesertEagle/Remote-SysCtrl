@import 'colorScheme';

@mixin UITransition($type, $ignore) {
	@if $type == 'emphasize' {
		@if nth($ignore, 1) == false {
			transition: all 0.5s;			
		} @else {
			// Exempt properties from transitioning, which are passed as arguments
			$transitPropVal: all 0.5s,;
			@each $exemptedProp in $ignore {
				@if $exemptedProp == nth($ignore, length($ignore)) {
					$transitPropVal: append($transitPropVal, $exemptedProp 0s);
				} @else {
					$transitPropVal: append($transitPropVal, $exemptedProp 0s,);					
				}
			}
			// @debug $transitPropVal;
			transition: $transitPropVal;						
		}
		transition-timing-function: cubic-bezier(0.07, 0.88, 0.34, 1.31);			
	}
	@else if $type == 'normal' {
		transition: all 0.2s;
		transition-timing-function: linear;					
	}
}

@mixin inheritPadding($top, $right, $bottom, $left) {
	padding: {
		@if $top {
			top: inherit;
		}
		@if $right {
			right: inherit;
		}
		@if $bottom {
			bottom: inherit;
		}
		@if $left {
			left: inherit;
		}						  
	}
}

header {
	position: relative;
	#navbar-container {
		position: absolute;
		width: 100%;
		#navbar-content {
			list-style-type: none;

			.navbar-elt-left, .navbar-elt-right{
				display: inline-block;
				width: auto;
				padding: 0.5rem;
				padding-bottom: 1.5rem;
				border-radius: 0;
				@include UITransition('emphasize', false);
				
				&:not(.dropdown-container) {
					background-color: getColor('highlight-dark');
					//transition: all 0.5s, background-color 0ms;					
				}
				& > a {
					color: getColor('light');
					font-size: 1.2rem;				
					text-decoration: none;
					@include UITransition('emphasize', false);					
				}
				&:hover {
					border-radius: 0.2rem;
					// border-radius: 0.4rem;
					padding-top: 1.5rem;
					background-color: getColor('highlight');					
					a:not(.navbar-elt-title) { // Avoid navbar elements from transitioning due to padding inheritance
						// Inherits the padding of the parent once it expands, ie., the navbar <li> container => For expanding the link-region for easy click
						// padding: {
						// 	top: inherit;
						// 	bottom: inherit;
						// }
						@include inheritPadding(true, false, true, false);
						color: getColor('dark');
					}
					.dropdown-menu {
						margin-top: 0;
						li {
							// display: none;
							visibility: visible;
							opacity: 1;
							// text-align: center;
							width: auto;
							&:hover{
								background-color: getColor('medium');
								a {
									color: getColor('light');
								}
							}
						}
					}

				}

				// width: auto;
			}

			.navbar-elt-center {
				background-color: getColor('highlight-dark');
				positive: absolute;
				height: 3.6rem;
				width: 100%;
			}

			.navbar-elt-left {
				float: left;
			}
			.navbar-elt-right {
				float: right;
			}
			
			.dropdown-container {
				@include UITransition('emphasize', background-color);
				// Either option is to use something like position: absolute;right:0;left:0 
				// || border-boxing (100% width causes children to stick to parent at the expense of padding) technique || apply -ve margin
				// Update: The negative padding seems to work fine. Don't put 100% width for .dropdown-menu!
				// box-sizing: border-box;
				// padding: {
				// 	left: 0;
				// 	right: 0;
				// }
				.navbar-elt-title {
					display: block;
					text-align: center;
					// transition: none;
					padding-bottom: 0.5rem;
				}
				.dropdown-menu {
					// Amazing CSS Trick: Place the dropdown-menu not accessible by the user, so that when he/she hovers over the area where 
					// the dropdown-menu would've been present (but is currently invisible), it would erroneously show up to user  
					position: relative;
					margin-top: -99rem;
					
					list-style-type: none;
					// box-sizing: border-box;
					margin-left: -0.5rem;
					margin-right: -0.5rem;
					// padding: 0;
					// position: absolute;
					// margin-left: -0.5rem;
					// display: block;
					// width: 100%;
					// visibility: none;
					// @include inheritPadding(false, true, false, true);
					li{
						// @include inheritPadding(true, true, true, true);			
						// width: 100%; // Not required, since <li> are block-level elements
						// text-align: left;
						visibility: hidden;
						opacity: 0;
						text-align: center;
						padding: {
							bottom: 0.2rem;
							left: 0.5rem;
							right: 0.5rem;
						}
						// @include UITransition('emphasize');
						a{
							// display: inline-block;
							display: block;
							// @include inheritPadding(true, true, true, true);						
			 				width: 100%;
							color: getColor('highlight-dark');
							text-decoration: none;
							@include UITransition('normal', false);
						}
					}
				}				
			}
			.icon {
				padding-bottom: 1.25rem;
				.material-icons {
					margin-top: 0.07rem;
					font-size: 1.5rem;
				}
			}
			#logo-container {
				// padding-top: -2rem;
				#logo-text {
					color: getColor('footer');
					font-weight: bold;
					text-shadow: rgba(50, 50, 50, 0.5) 0.3rem 0.3rem 0.4rem;
					#ctrl-text {
						margin-left: 0.3rem;
						background-color: rgba(230, 230, 230, 0.9);
						text-shadow: none;
						border: {
							radius: 0.2rem;
							right: 0.3rem solid rgba(130, 130, 130, 0.9);
							bottom: 0.3rem solid rgba(180, 180, 180, 0.9);
						}
					}
				}
			}			
		} 
	}	
}


// #logo-container{
// 	a{
// 		background-color: getColor('highlight');
// 		&:hover{
// 			background-color: getColor('light');			
// 		}
// 	}	
// 	#logo-text{
// 		padding-bottom: 0.25rem;
// 		display: inline-block;
// 		font-size: $fs-logo; /*3rem*/
// 		color: rgba(50, 50, 50, 0.9);
// 		text-shadow: rgba(50, 50, 50, 0.5) 0.3rem 0.3rem 0.4rem;
// 		font-weight: bold;
// 		#ctrl-text{
// 			margin-left: 0.5rem; 
// 			font-size: $fs-logo;
// 			color: rgba(50, 50, 50, 0.9);
// 			text-shadow: none;
// 			background-color: rgba(230, 230, 230, 0.9);
// 			border: {
// 				radius: 0.2rem;
// 				right: 0.3rem solid rgba(130, 130, 130, 0.9);
// 				bottom: 0.3rem solid rgba(180, 180, 180, 0.9);
// 			}
// 		}
// 	}	
// }